#+TITLE:Practice: Lab session on data, EDA and R
#+AUTHOR: [your name here]
#+SUBTITLE: Data visualization (DSC 302) Fall 2022
#+OPTIONS: toc:nil num:nil ^:nil
#+STARTUP: overview hideblocks indent
* READ README

  - Practice instructions for the data visualization lectures
  - Emacs + ESS + Org-mode and R must be installed
  - Upload the completed file as a class assignment ([[https://lyon.instructure.com/courses/571/assignments/1704][Canvas link]])

  #+name: tab:3_practice
  | PRACTICE         | MIN |
  |------------------+-----|
  | Prerequisites    |  15 |
  | Loading packages |  15 |
  | Looking at data  |  15 |
  | Factors vectors  |  15 |
  | Summary stats    |  15 |
  | Boxplots         |  10 |
  | Scatterplots     |  10 |
  | Bar charts       |  10 |
  | Customization    |  15 |
  |------------------+-----|
  | TOTAL            | 120 |
  #+TBLFM: @11$2=vsum(@2..@10)

* TODO IDENTIFY YOURSELF

  - Update the ~#+AUTHOR:~ information in the header
  - Add this on a line to the header of this file :
  - Put your cursor on the headline of this section, and type ~S <LEFT>~
    until you see ~DONE~ instead of ~TODO~ next to the title.
  - Perform this last step each time you complete a section.



* References

  - Pearson (2018), EDA Using R, CRC Press, Chapter 1.3 (pp. 11-21).

* Footnotes

[fn:1]If you say yes, R will save a copy of all your commands in that
session in a file ~.Rhistory~, and it will save all data in a file
~.RData~ to recreate your work space the way you left it.

[fn:2]You can run this command in any case - installing ~MASS~ does not
take very long and re-installing the package does no harm, it only
takes time.

[fn:3]The format of this documentation is common for R, and it
imitates the format of UNIX manual pages. After a /description/ and a
/usage/ note, the /format/ is described in terms of the variables. The
/source/ and /references/ given. At the end, the /examples/ section provides
examples, which sometimes can be called interactively with the ~example~
function, e.g. ~example(head)~.

[fn:4]In class, I often use the ~org-present~ package to present
Org-mode files and hide the metadata (e.g. for code blocks). If you
like this, see here for a tutorial including the code to put in your
~.emacs~ file.

[fn:5]To find out more about any R function, go to the console and
look up the help, as in ~help(str)~ or (equivalently) ~?str~. Generic
functions work with any R object, and their output depends on the
object type.

[fn:6]This Org-mode code block header argument lets the computer know
that you run R in a session buffer ~*R*~ and that you want to see the
results (if any) right here.

[fn:7]For factors, if the number of levels is > 6, only the five most
frequently occurring levels are listed, the others are lumped in one
'other' category. For L = 2 as here, all values are accounted for.

[fn:8]Notice the changed header arguments: ~:results output graphics
file~ to generate a graphics file, and ~:file boxplot.png~ as the file
name.

[fn:9]This key is bound to the Emacs Lisp function
~org-display-inline-images~. The key sequence ~C-c C-x C-v~ /toggles/ the
display of inline images (i.e. switches it on and off). ~<F6>~ only
makes the images visible, ~<F7>~ only makes them disappear.

[fn:10]Values that are at least 1.5 times the interquartile range
(IQR, difference between upper and lower quartile) above/below of the
upper/lower quartile are outliers.
#+begin_src R :session :results output graphics file :file ./img/boxplot3.png
  x <- c(0,0,2,5,8,8,8,9,9,10,10,10,11,12,12,12,14,15,20,25)
  boxplot(x)
#+end_src

#+RESULTS:
[[file:./img/boxplot3.png]]

In the example, the IQR=5, 1.5*IQR=6, therefore {0,0,20,25} are
outliers. The boxplot shows this.

[fn:11]One could also fit a single linear regression model to the data
set using the independent variables ~Temp~ and ~Insul~ as so-called
/predictors/, to predict the values of the measured/observed dependent
variable ~Gas~.

[fn:12]Answers: 1) Installed: R, Emacs + ESS; code block in an
Org-mode file; init commands in the ~~/.emacs~ file. 2) ~search()~. 3)
~tail~. 4) ~str~. 5) Only the values defined by the factor levels are
allowed. 6) The arithmetic mean and Tukey's five-point summary
(lower/upper quartile, min/max, median). 7) A function that accepts
different R objects (like a data frame) and returns different results
for each. 8) A graph displaying Tukey's five-point summary for an R
object, e.g. a data frame. 9) A matrix of scatterplots that shows how
each variable of a dataset relates to the others. 10) Changing
plotting symbols, including a legend, and drawing reference lines.
