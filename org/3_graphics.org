#+TITLE:  Exploratory vs explanatory graphics & R graphics systems
#+AUTHOR: Marcus Birkenkrahe
#+Subtitle: Introdution to Data Visualization
#+STARTUP: hideblocks overview indent inlineimages
#+PROPERTY: header-args:R :exports both :results output :session *R*
#+ATTR_HTML: :width 600px
[[../img/3_matisse.png]]
- What's a snail?
- Exploratory vs explanatory graphics
- Plot arrays and their use
- Base graphics plot functions
- R packages: ~grid~, ~lattice~, ~ggplot~
- Which graphics package should you use?

#+begin_notes
Image: Matisse, The Snail/L'Escargot (1953). Gouache on paper, cut and
pasted,mounted on canvas, 268.4 x 287 cm). Tate Gallery, London.
#+end_notes
* What's a snail?
#+ATTR_HTML: :width 300px
[[../img/3_matisse.png]]
#+ATTR_HTML: :width 280px
[[../img/3_snail.png]]

- What is the purpose of "graphics". Give some examples!
- What does "The Snail" by Matisse achieve as graphics?
- See also: [[https://www.moma.org/interactives/exhibitions/2014/matisse/the-swimming-pool.html][The Swimming Pool]], [[https://thegoodlifefrance.com/the-story-of-the-matisse-chapel-in-vence-south-of-france/][Matisse and the Chapelle du Rosaire]]

#+begin_notes
- Graphics: beauty/aesthetics, abstract representation of data
- Technique: color, line, medium, object, artist (subject)
- Origin: something written or drawn (also: basic unit of speech)
- John 8:6-8 "Jesus bent down and started writing on the ground with
  his finger." The Pharisees leave and Jesus is alone with the woman
  whom he saved from being stoned to death for adultery.
- Graphics examples: artistic, [[https://www.austinchronicle.com/binary/05ca/arts_feature1-1.jpg][architecture]], [[https://media.slidesgo.com/storage/75701/responsive-images/2-graphic-design-marketing-plan___media_library_original_1119_629.jpg][marketing]], [[https://design-milk.com/flowo-typewriter-e-ink-concept/][product design]]
#+end_notes

* Infographics vs. data visualization

*How would you describe the difference? Got an example?*

* Infographics

- Aesthetically rich (i.e. beautiful/nice to look at)
- Manually drawn (i.e. hard to create/alter/check)
- Represents specific data source

Example: 8-business-model Cow ([[https://www.entrepreneur.com/starting-a-business/this-cow-illustrates-8-business-models-infographic/292515][Leadem, 2017]])
#+attr_html: :width 200px
[[../img/cow.png]]

* Data visualization

- Aesthetically barren (i.e. not decorated/beautiful)
- Algorithmically drawn (i.e. easy to create/alter/check)
- Rich in data details

Example: interactive network visualization with [[https://cran.r-project.org/web/packages/visNetwork/vignettes/Introduction-to-visNetwork.html][visNetwork in R]]
([[https://www.r-bloggers.com/2019/06/interactive-network-visualization-with-r/][Junker, 2019]])
#+attr_html: :width 200px
[[../img/visedges.png]]

* Exploratory vs explanatory data visualization

*How would you describe the difference? Got an example?*

* Exploratory data visualization

- Helps us to understand what is in a *data set*
- Alternate name: Exploratory Data Analysis (EDA)
- Quickly *identify* features, curves, lines, trends, anomalies
- Best done at a high level of *granularity*
- Difficulty: separate *signals* from *noise*

Example: CRAN ggplot2 package downloads 2012-2019
#+attr_html: :width 300px
[[../img/2_ggplot2.png]]

[[https://cran.r-project.org/web/packages/Visualize.CRAN.Downloads/vignettes/Visualize.CRAN.Downloads.html][Image source: Visualize.Cran.Downloads]] (CRAN, 2021)

* Explanatory data visualization

- Help us *convey* findings to others
- Alternate name: Data Storytelling
- Known to you at the outset (apart from *feedback*)
- *Design* to accommodate a particular *audience*
- Best done after *editorial decisions* what is relevant
- Difficulty: *selecting* focused data that support your *story*

Example: Creating a visual CV using R
#+attr_html: :width 500px
[[../img/3_cv.png]]

Source: [[https://mmarteaga.github.io/post/VisualCV/][How to create a visual CV using R!]] (Arteaga, 2021)
* DONE Preparations to code along

[[../img/emacsprep.png]]

- Open a new Org-mode file ~plot.org~ in Emacs

- Put this line at the top of the file ~plot.org~:

  ~#+PROPERTY: header-args:R :results output :session *R*~

- Activate the code by putting your cursor on the line and entering
  ~C-c C-c~. You should see the message ~Local setup has been refreshed~
  in the minibuffer at the bottom of the editor.

- When you execute your first R code block, you'll be asked where you
  want the session named ~*R*~ to run: enter the path to ~plot.org~

- For plots, use the header ~:results graphics file :file plot.png~

- When you leave Emacs, you'll be warned that the session ~*R*~ is
  active: you can ignore this warning
* Extended example: US cereal data
[[../img/cereal.jpg]]

- Using: ~UScereal~ data frame from the ~MASS~ package
- 11 characteristics of 65 breakfast cereals available for sale
- Information mostly based on the package label required by US FDA

#+begin_src R :session :results output
  library(MASS)  # load MASS package
  data(UScereal) # load UScereal data frame
  str(UScereal)  # display data frame structure
#+end_src

* Exploratory plot array

A useful, and common, exploratory plot is a panel of pairwise
scatterplots to summarize the data frame.

#+begin_src R :exports both :session :results output graphics file :file ../img/cereal.png
  plot(UScereal, las = 2)
#+end_src

#+RESULTS:
[[file:../img/cereal.png]]

#+begin_notes
- The ~las~ parameter sets the position of the tick labels - ~las=2~ means
  always perpendicular to the axis.
- Diagonal elements of the array list the name of the variable in the
  x-axis of all plots in that column, and the y-axis of all plots in
  that row.
- For 11 variables, 110 plots are shown. Some indicate strong
  relationships, e.g. ~fat~ and ~calories~.
- Some variables, like ~vitamins~, show only few values
#+end_notes

* Explanatory scatterplot

#+attr_html: :width 400px
[[../img/scatterplot.png]]

#+begin_notes
- Scatterplot of calories vs. sugar variables, augmented with a robust
  regression line ("[[https://en.wikipedia.org/wiki/Robust_regression][robustness]]" refers to assumptions about the data)
- Dashed line highlights the trend our eye sees in the data if we
  ignore the two outlying points.
- The outliers correspond to cereals that have much higher calories
  than any of the others.
- The annotation of labels and text in the plot further aids the
  interpretation.
#+end_notes

#+begin_src R :exports both :session :results output graphics file :file ../calories.png
plot(data=UScereal, calories ~ sugars)
#+end_src

* Base graphics plot functions

- Base graphics is the system originally built into the R language
- It's most common generic function is ~plot~
- Base graphics are controlled by 72 graphics /parameters/
- Displays can be customized by /low-level/ plotting functions
- Examples: ~abline~, ~lines~, ~points~, ~text~, ~legend~ etc.

#+name: tab:graphicsfunctions
| FUNCTION      | OBJECT TYPE            | NATURE OF PLOT[fn:1]         |
|---------------+------------------------+------------------------|
| ~plot~          | Many                   | Depends on object type |
| ~barplot~       | Numeric                | Bar plot               |
| ~boxplot~       | Formula, numeric, list | Boxplot summary        |
| ~hist~          | Numeric                | Histogram              |
| ~sunflowerplot~ | Numeric + Numeric      | Sunflower plot         |
| ~mosaicplot~    | Formula or table       | Mosaic plot            |
| ~symbols~       | Multiple numeric       | Bubbleplots etc.       |

* Many many types of built-in diagrams

- There are more than 40 types of useful diagrams in R
  #+caption: Source: R graph gallery
  #+attr_html: :width 500px
  [[../img/rgraph.png]]

* ~grid~ graphics

- The ~grid~ package uses the [[https://www.rdocumentation.org/packages/grDevices/versions/3.6.2][grDevices]] graphics engine

- Some packages use it, e.g. [[https://cran.r-project.org/web/packages/vcd/index.html][vcd]] (for graphing categorical variables)

- Nothing to do with the ~grid~ function of the base R package (which
  draws a grid over the plot, see ~?grid~)

- More info: [[https://www.stat.auckland.ac.nz/~paul/grid/grid.html#downloaddocs][Paul Murrell's documents]]

#+attr_html: :width 500px
[[../img/grid.png]]

* ~lattice~ graphics

- Based on grid graphics, shipped with base R (needs to be loaded)

- Alternative implementation to many standard plotting functions,
  including scatterplots, bar charts, boxplots, histograms, QQ-plots

- [[https://cran.r-project.org/web/packages/lattice/lattice.pdf][lattice]] has different default options for plot customization and
  some additional features, like the /multipanel conditioning plot/

  #+begin_src R :results graphics file :file ../img/lattice.png
  library(MASS) # load MASS package for Cars93 data set
  library(lattice) # load lattice package

  ## plot MPG.city vs. Horsepower, conditioned by Cylinders
  xyplot(MPG.city ~ Horsepower | Cylinders, data = Cars93)
  #+end_src

  #+RESULTS:
  [[file:../img/lattice.png]]

- You can ~group~ variables and get an automatic legend per group

- Price to be paid: simple annotations are harder to do than base R

* Grammar of graphics with ~ggplot2~

- Grammar of graphics construction based on human perception

- Better support for multipanel conditioning plots

- Highly extensible, complex, steep learning curve ([[https://ggplot2.tidyverse.org/][see here]])

#+attr_html: :width 500px
#+caption: Grammar of Graphics (gg) philosophy
[[../img/gg.png]]

* The ~plot~ function

- ~plot(x,y)~ is a /generic/ function - it adapts to its arguments: e.g.

  | Plot type   | ~x~       | ~y~       |
  |-------------+---------+---------|
  | Scatterplot | ~numeric~ | ~numeric~ |
  | Boxplot     | ~factor~  | ~numeric~ |
  | Bar chart   | ~factor~  | ~NA~      |
  | Mosaic plot | ~factor~  | ~factor~  |

- For an overview of the different methods available, use ~methods~.

  #+name: methods
  #+begin_src R
    methods(plot)
  #+end_src

  #+RESULTS: methods
  #+begin_example
   [1] plot.acf*            plot.correspondence* plot.data.frame*
   [4] plot.decomposed.ts*  plot.default         plot.dendrogram*
   [7] plot.density*        plot.ecdf            plot.factor*
  [10] plot.formula*        plot.function        plot.hclust*
  [13] plot.histogram*      plot.HoltWinters*    plot.isoreg*
  [16] plot.lda*            plot.lm*             plot.mca*
  [19] plot.medpolish*      plot.mlm*            plot.ppr*
  [22] plot.prcomp*         plot.princomp*       plot.profile*
  [25] plot.profile.nls*    plot.raster*         plot.ridgelm*
  [28] plot.shingle*        plot.spec*           plot.stepfun
  [31] plot.stl*            plot.table*          plot.trellis*
  [34] plot.ts              plot.tskernel*       plot.TukeyHSD*
  see '?methods' for accessing help and source code
  #+end_example

- In the extended example, we already applied ~plot~ to a data frame, a
  numeric vector, a factor, and a pair of numeric variables, leading
  to an array of scatterplots, a bar chart, and a scatterplot.

* Bar chart with ~plot~

When only one categorical variable is given, ~plot~ generates a bar
chart with one bar per factor level.

#+begin_src R
  x <- c(1,2,2,3,3,3)  # numeric vector
  x_f <- factor(x)     # factor vector
  x_f
#+end_src

#+begin_src R :results graphics file :file ../img/3_barchart.png
  plot(x_f)
#+end_src

* Line plot with ~plot~

When a time series is given like the data set ~Nile~, ~plot~ generates a
line plot.

#+begin_src R
  class(Nile)
  str(Nile)
#+end_src

#+begin_src R :results graphics file :file ../img/3_lineplot.png
  plot(Nile)  # plotting a time series as line plot
  grid()  # draw a grid to make it easier to read a plot
#+end_src

* Box plots with ~plot~

- We used the ~boxplot~ function to create a boxplot summary of heating
  gas consumption before and after installation of insulation

- The same result with ~plot~:
  #+name: whitesideplot1
  #+begin_src R :results graphics file :file ../img/3_whiteside1.png
    plot(whiteside$Insul,whiteside$Gas)
  #+end_src

  #+RESULTS: whitesideplot1
  [[file:../img/3_whiteside1.png]]

- Customization is simple:
  #+name: whitesideplot2
  #+begin_src R :results graphics file :file ../img/3_whiteside2.png
    plot(x=whiteside$Insul, xlab="Insulation",
         y=whiteside$Gas,   ylab="Gas consumption",
                            main="Whiteside data set")
  #+end_src

  #+RESULTS: whitesideplot2
  [[file:../img/3_whiteside2.png]]

* Decision tree models with ~plot~

- Many modeling functions in R return a object that can be plotted

- You can store these objects and work with them during analysis

- Example: /decision tree models/ from the ~whiteside~ data frame using
  the ~rpart~ package.

- This model predicts the average value of the dependent variable,
  ~Gas~, from the values of the other variables, ~Insul~ and ~Temp~.

- Build the model: the formula only has two parts. The period operator
  ~.~ stands for "all other variables".
  #+name: rpart1
  #+begin_src R
    library(MASS)  # whiteside data set is in MASS
    library(rpart) # rpart: Recursive Partitioning and Regression Trees
    rpartModel <- rpart(Gas ~ ., data = whiteside)
    class(rpartModel)
  #+end_src

  #+RESULTS: rpart1
  : [1] "rpart"

- Plot the model and add generic text using ~text~ for ~rpart~ models:

  #+begin_src R :results graphics file :file ../img/3_rpart.png
    plot(rpartModel)
    text(rpartModel)
  #+end_src

  #+RESULTS:
  [[file:../img/3_rpart.png]]

- [ ] What methods are available for ~rpart~ and ~text~?
  #+begin_src R
    methods(class = "rpart")
    methods(text)
  #+end_src

- Let's try ~summary~, which generated Tukey's summary for data frames:
  #+begin_src R
    summary(rpartModel)
  #+end_src

* Model-based recursive partitioning with ~plot~

- MOB models have tree-based structures like decision tree models

- Each terminal node contains a linear regression model that generates
  predictions from other covariates (independent variables)

- The code to generate the model looks very similar to ~rpart~: the
  formula has three parts - ~Gas~ is predicted, ~Temp~ is the covariate to
  predict, and ~Insul~ is the partitioning variable used to build the
  tree.
  #+name: MOB1
  #+begin_src R
    library(partykit) # this will load three other required packages
    MOBmodel <- lmtree(Gas ~ Temp | Insul, data = whiteside)
    class(MOBmodel)
  #+end_src

  #+RESULTS: MOB1
  : Loading required package: grid
  : Loading required package: libcoin
  : Loading required package: mvtnorm
  : [1] "lmtree"     "modelparty" "party"

- In the plot, all records are assigned to one of the nodes, and a
  separate linear regression model that predicts ~Gas~ from ~Temp~ is
  built for each node.
  #+name: MOB2
  #+begin_src R :results graphics file :file ../img/3_mob.png
    plot(MOBmodel)
  #+end_src

  #+RESULTS: MOB2
  [[file:../img/3_mob.png]]

- What methods are available for ~lmtree~ ?
  #+begin_src R
    methods(class = "lmtree")
  #+end_src

* What does this mean?

1) Enormous graphics flexibility even within the base R graphics
   package. Regrettably, there seems to be a "package envy" phenomenon
   within the R community, fostered by RStudio's aggressive marketing

2) You can define your own object classes and construct methods for
   generic functions like ~plot~ or ~summary~ that make them generate
   specialized results for our object classes.

3) ~methods~ reveals the "S3 Object" character of R, dependent on the
   packages loaded into your R session. S is the language that came
   before R. In OOP, objects have /methods/ and /attributes/.

   #+begin_src R
     attributes(mtcars)
     lmod <- lm(mtcars$wt ~ mtcars$mpg)
     lmod
     attributes(lmod)
   #+end_src

   For an example of the information stored in this model, run
   ~plot(lmod)~ in the R console - this will produce several plots at
   once (click on the graph to move to the next one).

* Optional parameters for base graphics

- There are 72 optional base graphics parameters set by the ~par~
  function

- Check out the help for ~par~ right now

- ~par~ can also be called (like ~options~ and other system functions)

  #+begin_src R
    names(par())
  #+end_src

  #+RESULTS:
  #+begin_example
   [1] "xlog"      "ylog"      "adj"       "ann"       "ask"       "bg"
   [7] "bty"       "cex"       "cex.axis"  "cex.lab"   "cex.main"  "cex.sub"
  [13] "cin"       "col"       "col.axis"  "col.lab"   "col.main"  "col.sub"
  [19] "cra"       "crt"       "csi"       "cxy"       "din"       "err"
  [25] "family"    "fg"        "fig"       "fin"       "font"      "font.axis"
  [31] "font.lab"  "font.main" "font.sub"  "lab"       "las"       "lend"
  [37] "lheight"   "ljoin"     "lmitre"    "lty"       "lwd"       "mai"
  [43] "mar"       "mex"       "mfcol"     "mfg"       "mfrow"     "mgp"
  [49] "mkh"       "new"       "oma"       "omd"       "omi"       "page"
  [55] "pch"       "pin"       "plt"       "ps"        "pty"       "smo"
  [61] "srt"       "tck"       "tcl"       "usr"       "xaxp"      "xaxs"
  [67] "xaxt"      "xpd"       "yaxp"      "yaxs"      "yaxt"      "ylbias"
  #+end_example

- As you can read in ~help(par)~, some of these parameters are
  read-only (i.e. their values are fixed)

* Important parameters for ~plot~ customization

- ~mfrow~, a 2-dim vector that sets up an array of plots
  #+name: mfrow
  #+begin_src R :session *R* :results graphics file :file ../img/mfrow.png
    par(mfrow=c(2,1))
    plot(rnorm(100), type="l")
    title("100 random numbers")
    plot(rnorm(1000), type="l")
    title("100 random numbers")
  #+end_src

- Several parameters come in groups:
  1) The ~cex~ family scales text and symbols in relation to one
     another, e.g. ~cex.main~ scales the main plot title relative to ~cex~
     #+name: cex
     #+begin_src R :session *R* :results graphics file :file ../img/cex.png
       plot(rnorm(100),
            main="Double the size",
            cex=2,   # double point symbol size
            cex.main=2 # scale title relative to cex
            )
     #+end_src

  2) The ~col~ family specifies colors for points, lines, text[fn:2]
     #+name: col
     #+begin_src R :session *R* :results graphics file :file ../img/col.png
       plot(rnorm(100),
            main="Color me impressed",
            col      = "purple",  # color points
            col.main = "red",    # color title
            col.axis = "blue"   # color axis labels
            )
     #+end_src

  3) The ~font~ family specifies font types (plain = 1, bold = 2, italic
     = 3, bold italic = 4).
     #+name: font
     #+begin_src R :session *R* :results graphics file :file ../img/font.png
       plot(rnorm(100),
            main="Fountain of font",
            font.main = 4,  # title font bold italic
            font.lab = 3,   # axis labels in italic
            cex.main = 2    # double title font size
            )
     #+end_src

     #+RESULTS: font
     [[file:../img/font.png]]

* Other parameters

- ~adj~ specifies justification of the text (0=left,1=right, center=0.5)

  #+begin_src R :session *R* :results graphics file :file ../img/adj.png
    plot(rnorm(100), type="n")
    text(x=40,y=0,labels="Right-justified text",adj=1,font=3)
    text(x=40,y=-1,labels="Left-justified text",adj=0,font=3)
    text(x=40,y=1.5,labels="Centered text",adj=0.5,font=3)
  #+end_src

  #+attr_html: :width 300px
  [[file:../img/adj.png]]

- ~lty~ and ~lwd~ specify line type and line width.
  #+name: linewidth
  #+begin_src R :session *R* :results graphics file :file ../img/lty.png
    plot(Nile, lty=2)
  #+end_src

  #+RESULTS: linewidth
  [[file:../img/lty.png]]

  #+name: linewidth
  #+begin_src R :session *R* :results graphics file :file ../img/lwd.png
    plot(Nile, lwd=3)
  #+end_src

  #+RESULTS:
  [[file:../img/lwd.png]]

- [ ] How can you see current values of these parameters? Remember how
  to do this with ~options()~? What type of R object is ~par()~?

  #+begin_src R
    class(par())
    par()$lty
    par()$adj
  #+end_src

* Multiple plots and passing parameters

- The ~ask~ parameter is a /logical/ flag (the default value is ~FALSE~)
  that specifies whether the graphics system should wait for a user
  response before displaying the next plot.

- [ ] How can I confirm that ~ask~ is ~logical~, and see its value?

  #+begin_src R
    class(par()$ask)
    par()$ask
  #+end_src

- [ ] See e.g. ~example(Nile)~ in the R console (not in Org-mode)

- This option is not always set correctly after displaying multiple
  plots - it must be set back by hand with ~par(ask = FALSE)~.

- Some parameters cannot be set as passing parameters, e.g. ~las~ -
  usually for different plot types (e.g. mosaic plots).

* Adding points and lines to a scatterplot
#+attr_html: :width 300px
[[file:../img/cereals.png]]
#+attr_html: :width 300px
[[file:../img/cereals1.png]]

* Starting plot without bells and whistles

- Starting point is calories vs. sugars from the ~UScereal~ data frame
  #+begin_src R :results graphics file :file ../img/cereal.png
    par(mfrow=c(1,1))
    x <- UScereal$sugars
    y <- UScereal$calories
    plot(x,y)
  #+end_src

  #+RESULTS:
  [[file:../img/cereal.png]]

- ~mfrow~ creates a persistent 1x1 array (single plot)
- Variables ~x~, ~y~ are defined because we use them again
- ~plot(x,y)~ is invoked to get a simple scatterplot

* Adding axis labels ~xlab~, ~ylab~, and ~type~ 

- The next block invokes ~plot~ again, but with three optional
  arguments:

  1) ~xlab~: a ~character~ string for the x-axis label
  2) ~ylab~: a ~character~ string for the y-axis label
  3) ~type = "n"~: specifies that the plot is constructed but /not
     displayed/

  #+begin_src R :results graphics file :file ../img/cereal1.png
    plot(x,y,
         xlab="Grams of sugar per serving",
         ylab="Calories per serving",
         type = "n")
  #+end_src

  #+RESULTS:
  [[file:../img/cereal1.png]]
  
* TODO Highlighting outliers with ~points~
* TODO Add reference lines with ~abline~
* TODO Customizing point and line attributes
* IN PROGRESS Concept summary

- Infographics are design-rich and built to inform, data
  visualizations (and dashboards) are data-rich and built to be
  flexible and alterable

- Exploratory/explanatory graphics have different challenges. EDA:
  separate signal from noise; storytelling: tell a good story!

* IN PROGRESS Code summary

| COMMAND | MEANING                                 |
|---------+-----------------------------------------|
| ~method~  | Available methods for generic functions |

* IN PROGRESS Glossary

| TERM                 | MEANING |
|----------------------+---------|
| Infographics         |         |
| Data visualization   |         |
| Exploratory graphics |         |
| Explanatory graphics |         |

* References

- Arteaga M (20 January, 2021). How to create a visual CV using
  R!. [[https://mmarteaga.github.io/post/VisualCV/][Online: mmarteaga.github.io]].
- CRAN (27 April 2021). Visualize downloads from CRAN
  Packages. [[https://cran.r-project.org/web/packages/Visualize.CRAN.Downloads/vignettes/Visualize.CRAN.Downloads.html][Online: cran.r-project.org]].

* Footnotes

[fn:2] "Color me impressed" is also a [[https://youtu.be/9_358OhIRqo][song by The Replacements]]. It
contains the uplifting lines: Everybody at your party / They don't
look depressed / And everybody's dressin' funny / Color me impressed.

[fn:1]Plot types not seen in this lecture yet: sunflower plots
(scatterplots that reduce overplotting by turning multiple points into
petals); mosaic plots (mosaic of rectangles whose height represents
the proportional value); bubbleplots (scatterplot with a third
dimension represented with the size of the dots).
