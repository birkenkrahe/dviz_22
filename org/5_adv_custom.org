#+TITLE:  Advanced base R plot customization
#+AUTHOR: Marcus Birkenkrahe
#+Subtitle: Introduction to Data Visualization
#+STARTUP: hideblocks overview indent inlineimages
#+PROPERTY: header-args:R :exports both :results output :session *R*
* ~pie~ charts and why they should be avoided

- When should we use pie charts instead of rectangular plots?
  #+begin_quote
  »Pie graphs are best used when precision isn't particularly
  important, and when there are relatively few wedges to compare (or
  few that matter to the story).«
  #+end_quote
- Dataset: ~dataCar~ in the ~insuranceData~ package with lots of factors
  #+name: loadDataCar
  #+begin_src R
    library(insuranceData)
    data(dataCar)
    str(dataCar)
  #+end_src

  #+RESULTS:
  #+begin_example
  'data.frame': 67856 obs. of  11 variables:
   $ veh_value: num  1.06 1.03 3.26 4.14 0.72 2.01 1.6 1.47 0.52 0.38 ...
   $ exposure : num  0.304 0.649 0.569 0.318 0.649 ...
   $ clm      : int  0 0 0 0 0 0 0 0 0 0 ...
   $ numclaims: int  0 0 0 0 0 0 0 0 0 0 ...
   $ claimcst0: num  0 0 0 0 0 0 0 0 0 0 ...
   $ veh_body : Factor w/ 13 levels "BUS","CONVT",..: 4 4 13 11 4 5 8 4 4 4 ...
   $ veh_age  : int  3 2 2 2 4 3 3 2 4 4 ...
   $ gender   : Factor w/ 2 levels "F","M": 1 1 1 1 1 2 2 2 1 1 ...
   $ area     : Factor w/ 6 levels "A","B","C","D",..: 3 1 5 4 3 3 1 2 1 2 ...
   $ agecat   : int  2 4 2 2 2 4 4 6 3 4 ...
   $ X_OBSTAT_: Factor w/ 1 level "01101    0    0    0": 1 1 1 1 1 1 1 1 1 1 ...
  #+end_example

- Create a contingency table of the categorical ~veh_body~ variable,
  which has 13 different distinct levels, and sort its frequencies
  #+name: xtab
  #+begin_src R
    xTab <- table(dataCar$veh_body)
    xTab
    length(xTab)
  #+end_src

- Compare pie chart and barplot for this variable: what do you see?
  #+begin_src R :results graphics file :file ../img/pie.png
    par(mfrow=c(1,2))
    pie(xTab)
    title("Pie chart")
    barplot(xTab, las=2, cex.names=0.5)
    title("Bar chart")
  #+end_src
  #+begin_notes
  - Labels of the pie chart overlap badly to be unreadable
  - Barplot summarizes the relative frequencies much more effectively
  - Barplot offers options for further exploration e.g. of modality
  - Barplot output can be customized further
  #+end_notes

* ~barplot~ summaries

- You can also obtain a bar plot by applying ~plot~ to a ~factor~
  #+begin_src R :results graphics file :file ../img/bar1.png
    par(mfrow=c(1,1))
    plot(dataCar$veh_body, las=2, cex.names=0.5)
    title("Bar chart with plot()")
  #+end_src

- The ~barplot~ functions allows creation of customizable
  vertical/horizontal or stacked bar charts (how to check?)
  #+begin_example R
    example(barplot) # run this in an R console then click the graph
  #+end_example

- Horizontal barplot of ~veh_body~ values from the ~dataCar~ data frame
  in decreasing order of frequency from top to bottom
  #+begin_src R :results graphics file :file ../img/bar2.png :noweb yes
    <<loadDataCar>>
    <<xtab>>
    par(mfrow=c(1,1))
    barplot(
      sort(xTab),
      las=1,
      cex.names=0.7,
      horiz=TRUE,
      main="Relative frequencies of veh_body from dataCar")
  #+end_src

- The function ~sort~ sorts vector values in decreasing or increasing
  order. To reverse the order, add the parameter ~decreasing=TRUE~
  #+begin_src R :results graphics file :file ../img/bar3.png
    par(mfrow=c(1,1))
    barplot(
      sort(xTab, decreasing=TRUE),
      las=1,
      cex.names=0.7,
      horiz=TRUE,
      main="Relative frequencies of veh_body from dataCar")
  #+end_src

* The ~symbols~ function

- The ~symbol~ function flexibly supports plots of more than two numeric
  variables /(generally, which ways are there to plot such data?)/

- *Example:* bubbleplot, a scatterplot with points as circles where
  circle size is determined by a third numeric variable (same length)

- [ ] Does ~symbols~ allow any symbols other than circles for plotting?

- [ ] Bubbleplot of ~MPG.city~ vs. ~Horsepower~ from the ~Cars93~ data frame
  in the ~MASS~ package. - /What's the third variable?/
  #+begin_src R
    library(MASS)
    data(Cars93)
    str(Cars93)
  #+end_src

  #+begin_src R :results graphics file :file ../img/bubbleplot.png
    symbols(
      x = Cars93$Horsepower,
      y = Cars93$MPG.city,
      circles = as.numeric(Cars93$Cylinders)
    )
  #+end_src

- This is not a very clear graph. Studying the documentation, you find
  the important parameter ~inches~ - its default is ~TRUE~: the largest
  size of any drawn symbol is 1 inch
  #+name: bubbleplot
  #+begin_src R :results graphics file :file ../img/bubbleplot1.png
    symbols(
      x = Cars93$Horsepower,
      y = Cars93$MPG.city,
      circles = as.numeric(Cars93$Cylinders),
      inches = 0.4) # too small bubbles cannot be customized
  #+end_src

- [ ] To get most from this third dimension, we use the ~text~ function:
  - /What is the parameter ~srt~? How can you find out what it is?/
  #+begin_src R :noweb yes :results graphics file :file ../img/bubbleplot2.png
    <<bubbleplot>>
    text(
      x = Cars93$Horsepower,
      y = Cars93$MPG.city,
      Cars93$Cylinders,
      srt = 30)
  #+end_src

- What insights can we get from this bubbleplot?
  #+begin_quote
  1) The smallest circles correspond to cars with 3 cylinders: they
     exhibit the best city gas mileage but the lowest horsepower
  2) One vehicle stands out with 4 cylinders, the second-lowest gas
     mileage, and a horsepower of more than 100
  3) One (of two) 5-cylinder car has a similar horsepower but much worth
     mileage


- To see the distribution of cars across cylinder types, build a
  contingency table:
  #+begin_src R
    table(Cars93$Cylinders)
  #+end_src

  #+RESULTS:
  :
  :      3      4      5      6      8 rotary
  :      3     49      2     31      7      1

- The ~symbols~ function allows to show relationships of three or more
  numerical variables:
  1) ~circles~ generates plots for three variables
  2) ~squares~ generates plots for three variables
  3) ~rectangles~ generates plots for four variables (2 for length, and
     2 for width of the rectangles) etc.

* Multiple plot arrays

- The plot parameter ~mfrow~ is a two-dimensional vector that defines
  the number of elements in a rectangular array of plots

- The first element specifies the number of rows ~R~, the second
  specifies the number of columns ~C~ of this plot array: ~mfrow=c(R,C)~

- Use base R graphics functions to create each individual plot from
  top left to right, until you reach bottom row

- Choose the layout in alignment with the data and the plot type:
  remember the uncustomized 11 x 11 plot array for ~plot(UScereal)~: too
  small to analyze properly
  #+begin_src R :results graphics file :file ../img/cereals.png
    library(MASS)
    data(UScereal)
    plot(UScereal)
  #+end_src

* Comparing similar plots

- Plot arrays are useful when comparing two similar plots, e.g. gas
  mileage in the city (~MPG.city~) vs. gas mileage on the highway
  (~MPG.highway~) as a function of ~Horsepower~.

- We use the ~Cars93~ data frame from the ~MASS~ package to plot the
  corresponding variables.
  #+begin_src R :results graphics file :file ../img/cityhighway1.png
    par(mfrow=c(1,2))

    plot(Cars93$MPG.city ~ Cars93$Horsepower)
    title("Plot no. 1")
    plot(Cars93$MPG.highway ~ Cars93$Horsepower)
    title("Plot no. 2")
  #+end_src

- Can you see a problem with this last graph? How easy is it to
  compare the plots?

- To fix the problem, we re-scale y-axes using the ~ylim~ parameter
  #+begin_src R
    city <- Cars93$MPG.city        # store city mileage
    highway <- Cars93$MPG.highway  # store highway mileage
    range(highway)   # min/max range
    range(city)
  #+end_src

- All y-values are contained in the interval ~[15,50]~:
  #+begin_src R :results graphics file :file ../img/cityhighway2.png
    par(mfrow=c(1,2))
    plot(Cars93$MPG.city ~ Cars93$Horsepower, ylim=c(15,50))
    title("Plot no. 1")
    plot(Cars93$MPG.highway ~ Cars93$Horsepower, ylim=c(15,50))
    title("Plot no. 2")
  #+end_src

- Finally, we clean up title and label texts for better readability
  #+begin_src R :results graphics file :file ../img/cityhighway3.png
    par(mfrow=c(1,2))
    plot(Cars93$MPG.city ~ Cars93$Horsepower,ylim=c(15,50),xlab="",ylab="")
    title("City mileage", xlab="Horsepower", ylab="City gas mileage")
    plot(Cars93$MPG.highway ~ Cars93$Horsepower,ylim=c(15,50),xlab="",ylab="")
    title("Highway mileage", xlab="Horsepower", ylab="Highway gas mileage")
  #+end_src

* Disadvantage of plot arrays

- We just saw one disadvantage: you have to pay attention to scales

- Another one: the y-axis is greatly elongated (because of the
  parameter ~pty~, which is set to ~m~ for "use maximum available space"

- You can override the default by setting ~pty ='s'~ in ~par~ ('s' stands
  for 'square'). Using our last example for illustration:
  #+begin_src R :results graphics file :file ../img/cityhighway4.png
    par(mfrow=c(1,2),pty='s')
    plot(Cars93$MPG.city ~ Cars93$Horsepower,ylim=c(15,50),xlab="",ylab="")
    title("City mileage", xlab="Horsepower", ylab="City gas mileage")
    plot(Cars93$MPG.highway ~ Cars93$Horsepower,ylim=c(15,50),xlab="",ylab="")
    title("Highway mileage", xlab="Horsepower", ylab="Highway gas mileage")
  #+end_src

- Do you remember how to check a ~par~ value - e.g. ~pty~?
  #+begin_src R
    par()$pty
  #+end_src

* Different relationships in one array

- The following example demonstrates how the 2 x 2 plot array is
  generally large enough to see interesting details

- We want to see the relationships between mileages and cylinders in
  different driving environments using the ~Cars93~ data set from the
  ~MASS~ package
  #+begin_src R
    library(MASS)  # set up environment with packages and datasets
    data(Cars93)

    cyl <- Cars93$Cylinders  # store objects for later use
    city <- Cars93$MPG.city
    highway <- Cars93$MPG.highway

    range(highway)  # check y limits to rescale y-lim if necessary
    range(city)
  #+end_src

- [ ] Build and interpret the following plot!
  #+begin_src R :results graphics file :file ../img/multiple.png
    par(mfrow=c(2,2))  # define a 2 x 2 plot array

    plot(city ~ cyl, las = 2, ylim = c(15,50))  # las = 2 perpendicular
    title("MPG.city vs. Cylinders")

    plot(highway ~ cyl, las = 2, ylim = c(15,50))
    title("MPG.highway vs. Cylinders")

    plot( highway ~ city, xlim = c(15,50), ylim = c(15,50))
    title("MPG.highway vs. MPG.city")
    abline(a = 0, b = 1, lty = 2, lwd = 2)

    plot(highway-city ~ cyl, las = 2)
    title("Mileage difference vs. Cylinders")
  #+end_src

  #+RESULTS:
  [[file:../img/multiple.png]]

  #+begin_notes
  1) Mileage declines as number of cylinders increase
  2) Highway mileage is always greater than city mileage
  3) Mileage difference increases with cylinder number
  4) Labeling with ~las~ and ~xlim~, ~ylim~ aids comparability/readability
  #+end_notes

* Re-scaling and re-labeling

- Note the scaling choices, which facilitates comparison between the
  boxplots in the first row, and displays the equality line as a
  diagonal line.

- Note the use of ~las=2~ (display all labels perpendicular to their
  axis). Without the default orientation (~las = 0~, axis-parallel) long
  labels would not be printed (~rotary~ is just about short enough)

  #+begin_src R
    levels(cyl)[6] <- "rotary_cylinder"
    levels(cyl)
  #+end_src

  #+RESULTS:
  : [1] "3"               "4"               "5"               "6"
  : [5] "8"               "rotary_cylinder"

- Compare with the result without re-scaling or re-labeling
  #+begin_src R :results graphics file :file ../img/multiple1.png
    par(mfrow=c(2,2))  # define a 2 x 2 plot array

    plot(city ~ cyl)  # las = 2 perpendicular
    title("MPG.city vs. Cylinders")

    plot(highway ~ cyl)
    title("MPG.highway vs. Cylinders")

    plot( highway ~ city)
    title("MPG.highway vs. MPG.city")
    abline(a = 0, b = 1, lty = 2, lwd = 2)

    plot(highway-city ~ cyl, las=0, cex=0.7)
    title("Mileage difference vs. Cylinders")
  #+end_src

  #+RESULTS:
  [[file:../img/multiple1.png]]

* Using the ~layout~ function

- The ~layout~ function provides more flexibility to creating plot
  arrays

- Remember that arrays are important for exploratory and explanatory
  data analysis, e.g. to get an overview and to enable comparisons

- This means that greater flexibility translates to greater EDA power

* Constructing the layout matrix

- The ~layout~ function constructs a /layout matrix/ whose integer
  elements specify plot positions

- Constructing the layout matrix:
  #+begin_src R
    vectorOfNumbers <- c(
      rep(x=0, times=4),
      rep(c(1,1,2,2), times=2),
      rep(x=0, times=4))

    layoutMatrix <- matrix(
      vectorOfNumbers,
      nrow = 4,
      byrow = TRUE)
    layoutMatrix
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3] [,4]
  : [1,]    0    0    0    0
  : [2,]    1    1    2    2
  : [3,]    1    1    2    2
  : [4,]    0    0    0    0

- Here, ~rep~ repeats its argument ~times~ times, and ~matrix~ creates a
  matrix of ~4~ rows, distributing the vector elements row after row

- To set up the plot array correctly, the matrix must be structured
  into blocks, with all elements having the same value in each block

- The n-th plot is put in the array position corresponding to the
  block with the value ~n~. Blocks with value ~0~ specify whitespace
* Example from ~Cars93~

- Example with ~Cars93~ from the ~MASS~ package:
  #+begin_src R :results graphics file :file ../img/5_layout.png
    library(MASS)
    data(Cars93)

    ## setup up the layout
    layout(layoutMatrix)  # instead of par(mfrow=c(1,2),pty='s')
    ## plot data and title plots
    plot(x=Cars93$Horsepower, y=Cars93$MPG.city, ylim=c(15,50))
    title("Plot no. 1")
    plot(x=Cars93$Horsepower, y=Cars93$MPG.highway, ylim=c(15,50))
    title("Plot no. 2")
  #+end_src

  #+RESULTS:
  [[file:../img/5_layout.png]]

- The difference to using ~mfrow~ even with the ~pty~ parameter are subtle
  but visible:
  #+begin_src R :results graphics file :file ../img/5_mfrow.png
    library(MASS)
    data(Cars93)

    ## setup up the layout
    par(mfrow=c(1,2),pty='s')   # s creates a square plotting region
    ## plot data and title plots
    plot(x=Cars93$Horsepower, y=Cars93$MPG.city, ylim=c(15,50))
    title("Plot no. 1")
    plot(x=Cars93$Horsepower, y=Cars93$MPG.city, ylim=c(15,50))
    title("Plot no. 2")
  #+end_src

  #+RESULTS:
  [[file:../img/5_mfrow.png]]

* Example from ~PimaIndiansDiabetes~

- We want to set up the layout matrix for this output, which includes
  both a scatterplot (top left) and a sunflower plot (bottom right)
  #+attr_html: :width 300px
  [[../img/layout1.png]]

- Construction of the layout matrix: a small 2 x 2 block for the
  first (1), and a large 4 x 4 block for the second (2) plot:
  #+begin_src R
    layoutVector <- c(
      rep(c(1,1,0,0,0,0),2),  # upper left block
      rep(c(0,0,2,2,2,2),4))  # lower right block

    layoutMatrix <- matrix(
      layoutVector,
      nrow = 6,
      byrow = TRUE)

    layoutMatrix
  #+end_src

  #+RESULTS:
  :      [,1] [,2] [,3] [,4] [,5] [,6]
  : [1,]    1    1    0    0    0    0
  : [2,]    1    1    0    0    0    0
  : [3,]    0    0    2    2    2    2
  : [4,]    0    0    2    2    2    2
  : [5,]    0    0    2    2    2    2
  : [6,]    0    0    2    2    2    2

- The data consists of the ~insulin~ and ~triceps~ variables from the
  ~PimaIndiansDiabetes~ data set in the ~mlbench~ package of benchmark
  data sets.
  #+begin_src R :results graphics file :file ../img/pimalayout.png
    library(mlbench)  # you may have to install this package - if you do
                                            # this in Emacs, use your .Rprofile file for repos
    data(PimaIndiansDiabetes)
    pima <- PimaIndiansDiabetes # copy data frame

    layout(layoutMatrix)

    plot(x = pima$insulin, y = pima$triceps)
    title("Scatterplot")

    sunflowerplot(x= pima$insulin, y = pima$triceps)
    title("Sunflowerplot")
  #+end_src

  #+RESULTS:
  [[file:../img/pimalayout.png]]

- The scatterplot shows how the two variables cluster with no
  indication of repeated values

- The larger sunflower plot shows the extent to which records with
  ~insulin = 0~ (which is physically impossible) coincide with repeated
  ~triceps=0~ values (which is also physically impossible)

- Giving different emphasis to plots is not possible with ~mfrow~

* Practice exercise
[[../img/5_nilelayout.png]]

- Practice creating a plot array ~layout~ ([[https://tinyurl.com/yvnjkt42][tinyurl.com/yvnjkt42]])

- Create a layout matrix
- Plot a line plot and a histogram of ~Nile~

* Color graphics
#+attr_html: :width 400px
[[../img/5_rainbow.jpg]]

- Color can help or obstruct enormously

- Color is not always available

- Color plots can lose their meaning when rendered in b/w: [[https://drive.google.com/file/d/17qIKL2iW4O3LI1tBGZ8i6Y99BVfUZFgO/view?usp=sharing][example]]
  from a recent paper (Khan/Birkenkrahe, 2022)
  #+attr_html: :width 400px
  [[../img/khan22.png]]

* General guidelines

- Three attributes of color:
  1) hue (color itself) - *not ordered*
  2) saturation (intensity) - *ordered*
  3) brightness (luminence/tint) - *ordered*

- Types of color scale:
  1) /sequential/: increasing saturation levels of the same hue are used
     to represent increasing values of the non-negative variable
  2) /diverging/: two contrasting hues are used, one for positive, the
     other for negative values. Saturation represents degree, and a
     third color indicates zero
  3) /qualitative/: contrasting hues are used to represent different
     levels of an un-ordered categorical variable

- When using hue for different levels, don't use too many colors
  typically limit the selection to ideally six, never more than 20

- Color blindness will introduce additional difficulties (see special
  packages)

* NEXT Chart of the top 12 colors

- The plot generated shows the top 12 colors
  #+begin_src R :results graphics file :file ../img/5_colors.png
    Top12Colors <- c(
      "red",
      "green",
      "yellow",
      "blue",
      "black",
      "white",
      "pink",
      "cyan",
      "gray",
      "orange",
      "brown",
      "purple")

    colorVector <- rev(Top12Colors) # same as sort(X,decreasing=TRUE)

    barLengths <- c(
      rep(x=1, times=6),
      rep(x=2, times=6))

    yvec <- barplot(
      height=barLengths,
      col = colorVector,
      horiz = TRUE,
      axes = FALSE)

    axis(
      side = 2,
      at = yvec,
      labels = colorVector,
      las = 2)
  #+end_src

- ~rev~ reverses ~Top12Colors~ because ~barplot~ constructs from bottom up
  by default, and we want top-ranked colors to appear at the top

- ~barLengths~ has two heights - longer bars for the preferred 6 colors
  #+begin_src R
    (barLengths <- c(rep(x=1, times=6),rep(x=2, times=6)))
  #+end_src

- ~yvec~ retrieves the positions of the center of each bar in the plot,
  which is then used in the ~axis~ function to position the y-axis
  labels
  #+begin_src R :results graphics file :file ../img/5_yvec.png
    barplot(
      height=barLengths,
      col = colorVector)
                                            #      horiz = TRUE)
                                            #      axes = FALSE)
  #+end_src

* Color options in R

- Base R supports 657 colors addressable with ~col~

- The ~col~ parameter family is structured like the ~cex~ parameters:
  + ~col~ specifies the color of text and plotting symbols
  + ~col.axis~ specifies the color of the axes
  + ~col.lab~ specifies the color of the axis labels
  + ~col.main~ specifies the color of the main plot title
  + ~col.sub~ specifies the color of the plot subtitle

- You can specify color in different ways: using the color name, or
  with the Red-Green-Blue hexadecimal code as ~#RRGGBB~
x
- Verify the numbers of colors available in R via the vector ~colors()~
  #+begin_src R
    length(colors())
  #+end_src

* Plots with ~colors~

- Plot 50 randomly selected colors:
  #+name: plotcolors
  #+begin_src R :results graphics file :file ../img/5_50colors.png
    set.seed(3) # ensure replicability by setting a seed
    colorNames <- sort(sample(colors(), size = 50))
    plot(
      x = seq(from=1, to=10, by=1),
      y = rep(5,10),
      ylim = c(0,6),
      xlab = "",
      ylab = "",
      axes = FALSE,
      type = "n")
  #+end_src

- Print the color name in its color on every plot point:
  #+begin_src R :noweb yes :results graphics file :file :file ../img/5_50colors1.png
    <<plotcolors>>
    for (i in 1:5) {
      index <- seq(1,10,1) + (i-1) * 10
      angle <- (-1)^(i+1) * 45
      text(
        seq(1,10,1), i,
        colorNames[index],
        col = colorNames[index],
        srt = angle)
    }
  #+end_src

- In the plot, alternate rows are oriented at +/-45 degrees to
  minimize overlap of the text

- Some colors are hard to distinguish with a light background, and the
  grey hues are hard to distinguish from one another

- The function ~rainbow~ returns a vector of ~n~ color specs in RGB format
  spaced along the rainbow from red, through orange, yellow, green,
  and blue, to violet.
  #+begin_src R
    rainbow(10)
  #+end_src

- Plot the ~rainbow~ colors
  #+begin_src R :results graphics file :file ../img/5_rainbow.png
    x <- seq(from=1, to=10, by=1)
    xColors <- rainbow(10)
    plot(x, x,
         xlim = c(0,11), ylim = c(0,11),
         xlab = "", ylab = "Element of rainbow(10)",
         type = "n",
         axes = FALSE)
    text(x, x,
         labels=xColors,
         col = xColors)
    axis(
      side = 2,
      at = x,
      labels = x) 
  #+end_src
  
* Stacked barplots in b/w and color

- A stacked barplot is an extension of the bar chart to represent an
  arbitrary two-categorical-variable contingency table

- Example: ~region~ and ~vote~ from the ~Chile~ data set in the ~car~ package,
  which characterizes voter attitudes and stated intentions prior to
  an election in Chile.
  #+begin_src R
    library(car)
    data(Chile)
    str(Chile)
  #+end_src

- The contingency table:
  #+begin_src R
    tbl <- table(Chile$region, Chile$vote)
    tbl
  #+end_src

- The table shows the number of rows with the respective ~(region,vote)~
  pair: it shows e.g. that the City of Santiago (~SA~) had the largest
  number of "No" votes (to Pinochet)

- The function ~barplot~ will now automatically print a stacked
  barplot. The x-axis represents ~vote~, the y-axis ~region~. The only
  customization is ~las=1~ to reorient y-axis labels
  #+begin_src R :results graphics file :file ../img/5_chile.png
    barplot(tbl, las=1)
  #+end_src

- The next plot shows the same plot color-coded using the recommended
  top 5 colors and includes a legend for the ~region~
  #+begin_src R :results graphics file :file ../img/5_chilecolor.png
    barplot(tbl, las=1,
            col=c("red","green","yellow","blue","black"))
    legend(x = "topleft",
         legend = levels(Chile$region),
         pch = 16,
         col = c("red","green","yellow","blue","black"))
  #+end_src

- In the color plot, the relationship between the variables is much
  easier to see

- Details difficult to see in the b/w version include: the values for
  x = ~A~ and y = ~M~, and that ~SA~ (Santiago de Chile) is generally the
  largest region among all voters except those who intend to vote
  "Yes".
  
* TODO Lab session: advanced plot customization
  [[../img/customize.jpg]]
