#+TITLE:  Advanced base R plot customization
#+AUTHOR: Marcus Birkenkrahe
#+Subtitle: Introduction to Data Visualization
#+STARTUP: hideblocks overview indent inlineimages
#+PROPERTY: header-args:R :exports both :results output :session *R*
* ~pie~ charts and why they should be avoided

- When should we use pie charts instead of rectangular plots?
  #+begin_quote
  »Pie graphs are best used when precision isn't particularly
  important, and when there are relatively few wedges to compare (or
  few that matter to the story).«
  #+end_quote
- Dataset: ~dataCar~ in the ~insuranceData~ package with lots of factors
  #+begin_src R
    library(insuranceData)
    data(dataCar)
    str(dataCar)
  #+end_src

  #+RESULTS:
  #+begin_example
  'data.frame': 67856 obs. of  11 variables:
   $ veh_value: num  1.06 1.03 3.26 4.14 0.72 2.01 1.6 1.47 0.52 0.38 ...
   $ exposure : num  0.304 0.649 0.569 0.318 0.649 ...
   $ clm      : int  0 0 0 0 0 0 0 0 0 0 ...
   $ numclaims: int  0 0 0 0 0 0 0 0 0 0 ...
   $ claimcst0: num  0 0 0 0 0 0 0 0 0 0 ...
   $ veh_body : Factor w/ 13 levels "BUS","CONVT",..: 4 4 13 11 4 5 8 4 4 4 ...
   $ veh_age  : int  3 2 2 2 4 3 3 2 4 4 ...
   $ gender   : Factor w/ 2 levels "F","M": 1 1 1 1 1 2 2 2 1 1 ...
   $ area     : Factor w/ 6 levels "A","B","C","D",..: 3 1 5 4 3 3 1 2 1 2 ...
   $ agecat   : int  2 4 2 2 2 4 4 6 3 4 ...
   $ X_OBSTAT_: Factor w/ 1 level "01101    0    0    0": 1 1 1 1 1 1 1 1 1 1 ...
  #+end_example

- Create a contingency table of the categorical ~veh_body~ variable,
  which has 13 different distinct levels, and sort its frequencies
  #+begin_src R
    xTab <- table(dataCar$veh_body)
    xTab
    length(xTab)
  #+end_src

- Compare pie chart and barplot for this variable: what do you see?
  #+begin_src R :results graphics file :file ../img/pie.png
    par(mfrow=c(1,2))
    pie(xTab)
    title("Pie chart")
    barplot(xTab, las=2, cex.names=0.5)
    title("Bar chart")
  #+end_src
  #+begin_notes
  - Labels of the pie chart overlap badly to be unreadable
  - Barplot summarizes the relative frequencies much more effectively
  - Barplot offers options for further exploration e.g. of modality
  - Barplot output can be customized further
  #+end_notes

* ~barplot~ summaries

- You can also obtain a bar plot by applying ~plot~ to a ~factor~
  #+begin_src R :results graphics file :file ../img/bar1.png
    par(mfrow=c(1,1))
    plot(dataCar$veh_body, las=2, cex.names=0.5)
    title("Bar chart with plot()")
  #+end_src

- The ~barplot~ functions allows creation of customizable
  vertical/horizontal or stacked bar charts (how to check?)
  #+begin_example R
    example(barplot) # run this in an R console then click the graph
  #+end_example

- Horizontal barplot of ~veh_body~ values from the ~dataCar~ data frame
  in decreasing order of frequency from top to bottom
  #+begin_src R :results graphics file :file ../img/bar2.png
    par(mfrow=c(1,1))
    barplot(
      sort(xTab),
      las=1,
      cex.names=0.7,
      horiz=TRUE,
      main="Relative frequencies of veh_body from dataCar")
  #+end_src

- The function ~sort~ sorts vector values in decreasing or increasing
  order. To reverse the order, add the parameter ~decreasing=TRUE~
  #+begin_src R :results graphics file :file ../img/bar3.png
    par(mfrow=c(1,1))
    barplot(
      sort(xTab, decreasing=TRUE),
      las=1,
      cex.names=0.7,
      horiz=TRUE,
      main="Relative frequencies of veh_body from dataCar")
  #+end_src

* The ~symbol~ function

- The ~symbol~ function flexibly supports plots of more than two numeric
  variables /(generally, which ways are there to plot such data?)/

- *Example:* bubbleplot, a scatterplot with points as circles where
  circle size is determined by a third numeric variable (same length)

- [ ] Does ~symbols~ allow any symbols other than circles for plotting?

- [ ] Bubbleplot of ~MPG.city~ vs. ~Horsepower~ from the ~Cars93~ data frame
  in the ~MASS~ package. - /What's the third variable?/
  #+begin_src R
    library(MASS)
    data(Cars93)
    str(Cars93)
  #+end_src

  #+begin_src R :results graphics file :file ../img/bubbleplot.png
    symbols(
      x = Cars93$Horsepower,
      y = Cars93$MPG.city,
      circles = as.numeric(Cars93$Cylinders)
    )
  #+end_src

- This is not a very clear graph. Studying the documentation, you find
  the important parameter ~inches~ - its default is ~TRUE~: the largest
  size of any drawn symbol is 1 inch
  #+name: bubbleplot
  #+begin_src R :results graphics file :file ../img/bubbleplot1.png
    symbols(
      x = Cars93$Horsepower,
      y = Cars93$MPG.city,
      circles = as.numeric(Cars93$Cylinders),
      inches = 0.4) # too small bubbles cannot be customized
  #+end_src

- [ ] To get most from this third dimension, we use the ~text~ function:
  - /What is the parameter ~srt~? How can you find out what it is?/
  #+begin_src R :noweb yes :results graphics file :file ../img/bubbleplot2.png
    <<bubbleplot>>
    text(
      x = Cars93$Horsepower,
      y = Cars93$MPG.city,
      Cars93$Cylinders,
      srt = 30) 
  #+end_src

- What insights can we get from this bubbleplot?
  #+begin_quote
  1) The smallest circles correspond to cars with 3 cylinders: they
     exhibit the best city gas mileage but the lowest horsepower
  2) One vehicle stands out with 4 cylinders, the second-lowest gas
     mileage, and a horsepower of more than 100
  3) One (of two) 5-cylinder car has a similar horsepower but much worth
     mileage


- To see the distribution of cars across cylinder types, build a
  contingency table:
  #+begin_src R
    table(Cars93$Cylinders)
  #+end_src

  #+RESULTS:
  :
  :      3      4      5      6      8 rotary
  :      3     49      2     31      7      1

- The ~symbols~ function allows to show relationships of three or more
  numerical variables:
  1) ~circles~ generates plots for three variables
  2) ~squares~ generates plots for three variables
  3) ~rectangles~ generates plots for four variables (2 for length, and
     2 for width of the rectangles) etc.

* Multiple plot arrays

- The plot parameter ~mfrow~ is a two-dimensional vector that defines
  the number of elements in a rectangular array of plots

- The first element specifies the number of rows ~R~, the second
  specifies the number of columns ~C~ of this plot array: ~mfrow=c(R,C)~

- Use base R graphics functions to create each individual plot from
  top left to right, until you reach bottom row

- Choose the layout in alignment with the data and the plot type:
  remember the uncustomized 11 x 11 plot array for ~plot(UScereal)~: too
  small to analyze properly
  #+begin_src R :results graphics file :file ../img/cereals.png
    library(MASS)
    data(UScereal)
    plot(UScereal)
  #+end_src

* Comparing similar plots

- Plot arrays are useful when comparing two similar plots, e.g. gas
  mileage in the city (~MPG.city~) vs. gas mileage on the highway
  (~MPG.highway~) as a function of ~Horsepower~.

- We use the ~Cars93~ data frame from the ~MASS~ package to plot the
  corresponding variables.
  #+begin_src R :results graphics file :file ../img/cityhighway1.png
    par(mfrow=c(1,2))

    plot(Cars93$MPG.city ~ Cars93$Horsepower)
    title("Plot no. 1")
    plot(Cars93$MPG.highway ~ Cars93$Horsepower)
    title("Plot no. 2")
  #+end_src

- Can you see a problem with this last graph? How easy is it to
  compare the plots?

- To fix the problem, we re-scale y-axes using the ~ylim~ parameter
  #+begin_src R
    city <- Cars93$MPG.city        # store city mileage
    highway <- Cars93$MPG.highway  # store highway mileage
    range(highway)   # min/max range
    range(city)
  #+end_src

- All y-values are contained in the interval ~[15,50]~:
  #+begin_src R :results graphics file :file ../img/cityhighway2.png
    par(mfrow=c(1,2))
    plot(Cars93$MPG.city ~ Cars93$Horsepower, ylim=c(15,50))
    title("Plot no. 1")
    plot(Cars93$MPG.highway ~ Cars93$Horsepower, ylim=c(15,50))
    title("Plot no. 2")
  #+end_src

- Finally, we clean up title and label texts for better readability
  #+begin_src R :results graphics file :file ../img/cityhighway3.png
    par(mfrow=c(1,2))
    plot(Cars93$MPG.city ~ Cars93$Horsepower,ylim=c(15,50),xlab="",ylab="")
    title("City mileage", xlab="Horsepower", ylab="City gas mileage")
    plot(Cars93$MPG.highway ~ Cars93$Horsepower,ylim=c(15,50),xlab="",ylab="")
    title("Highway mileage", xlab="Horsepower", ylab="Highway gas mileage")
  #+end_src

* NEXT Disadvantage of plot arrays

- We just saw one disadvantage: you have to pay attention to scales

- Another one: the y-axis is greatly elongated (because of the
  parameter ~pty~, which is set to ~m~ for "use maximum available space"

- You can override the default by setting ~pty ='s'~ in ~par~ - using our
  last example for illustration:
  #+begin_src R :results graphics file :file ../img/cityhighway4.png
    par(mfrow=c(1,2),pty='s')
    plot(Cars93$MPG.city ~ Cars93$Horsepower,ylim=c(15,50),xlab="",ylab="")
    title("City mileage", xlab="Horsepower", ylab="City gas mileage")
    plot(Cars93$MPG.highway ~ Cars93$Horsepower,ylim=c(15,50),xlab="",ylab="")
    title("Highway mileage", xlab="Horsepower", ylab="Highway gas mileage")
  #+end_src

- Do you remember how to check a ~par~ value - e.g. ~pty~?
  #+begin_src R
    par()$pty
  #+end_src

  #+RESULTS:

* Different relationships in one array

- The following example demonstrates how the 2 x 2 plot array is
  generally large enough to see interesting details

- We want to see the relationships between mileages and cylinders in
  different driving environments using the ~Cars93~ data set from the
  ~MASS~ package
  #+begin_src R
    library(MASS)  # set up environment with packages and datasets
    data(Cars93)

    cyl <- Cars93$Cylinders  # store objects for later use
    city <- Cars93$MPG.city
    highway <- Cars93$MPG.highway

    range(highway)  # check y limits to rescale y-lim if necessary
    range(city)
  #+end_src

- [ ] Build and interpret the following plot!
  #+begin_src R :results graphics file :file ../img/multiple.png
    par(mfrow=c(2,2))  # define a 2 x 2 plot array

    plot(city ~ cyl, las = 2, ylim = c(15,50))  # las = 2 perpendicular
    title("MPG.city vs. Cylinders")

    plot(highway ~ cyl, las = 2, ylim = c(15,50))
    title("MPG.highway vs. Cylinders")

    plot( highway ~ city, xlim = c(15,50), ylim = c(15,50))
    title("MPG.highway vs. MPG.city")
    abline(a = 0, b = 1, lty = 2, lwd = 2)

    plot(highway-city ~ cyl, las = 2)
    title("Mileage difference vs. Cylinders")
  #+end_src

  #+RESULTS:
  [[file:../img/multiple.png]]

  #+begin_notes
  1) Mileage declines as number of cylinders increase
  2) Highway mileage is always greater than city mileage
  3) Mileage difference increases with cylinder number
  4) Labeling with ~las~ and ~xlim~, ~ylim~ aids comparability/readability
  #+end_notes

* Re-scaling and re-labeling

- Note the scaling choices, which facilitates comparison between the
  boxplots in the first row, and displays the equality line as a
  diagonal line.

- Note the use of ~las=2~ (display all labels perpendicular to their
  axis). Without the default orientation (~las = 0~, axis-parallel) long
  labels would not be printed (~rotary~ is just about short enough)

  #+begin_src R
    levels(cyl)[6] <- "rotary_cylinder"
    levels(cyl)
  #+end_src

  #+RESULTS:
  : [1] "3"               "4"               "5"               "6"              
  : [5] "8"               "rotary_cylinder"
  
- Compare with the result without re-scaling or re-labeling
  #+begin_src R :results graphics file :file ../img/multiple1.png
    par(mfrow=c(2,2))  # define a 2 x 2 plot array

    plot(city ~ cyl)  # las = 2 perpendicular
    title("MPG.city vs. Cylinders")

    plot(highway ~ cyl)
    title("MPG.highway vs. Cylinders")

    plot( highway ~ city)
    title("MPG.highway vs. MPG.city")
    abline(a = 0, b = 1, lty = 2, lwd = 2)

    plot(highway-city ~ cyl, las=0)
    title("Mileage difference vs. Cylinders")
  #+end_src

  #+RESULTS:
  [[file:../img/multiple1.png]]
  
* TODO Using the ~layout~ function
* TODO Color graphics
