#+TITLE:  DataCamp Review: get started with R Shiny
#+AUTHOR: [your name]
#+Subtitle: Introduction to Data Visualization
#+STARTUP: hideblocks overview indent inlineimages
#+PROPERTY: header-args:R :exports both :results output :session *R*
* README

- Review of the 1st chapter of the DataCamp course
- Add your name and ~(pledged)~ in the ~#+AUTHOR:~ meta headline
- When you've completed the file, submit it in Canvas
- You'll get solutions after the deadline has passed

* TODO Identify yourself

1) Add your name and ~(pledged)~ at the top
2) Run the ~#+PROPERTY~ and ~#+STARTUP~ lines with ~C-c C-c~
3) You should open the R session in the same directory as this file
4) To check, run ~getwd()~ in the R console window

* TODO Answer conceptual questions

- What is the order of functions to create and call a Shiny app?

- What is the client/server model?

- Why should you learn R Shiny? What's the scenario?

- What exactly do you need to create and run a Shiny app?
  #+begin_notes

  #+end_notes

- What is the order of function to create a Shiny app?
  #+begin_notes

  #+end_notes

- What happens exactly when you call ~shinyApp~?
  #+begin_notes

  #+end_notes

- Where exactly do you see the app when you do this on your PC?
  #+begin_notes

  #+end_notes

- What else do you need to build an app for the Internet?
  #+begin_notes

  #+end_notes

* TODO Create a 'hello world!' app

1) Load the Shiny package
2) Create the user interface ~ui~ as ~fluidPage("Hello, world!")~
3) Create the ~server~ as ~function(input, output, session){}~
4) To run, call ~shinyApp~ on ~ui~ and ~server~
5) To stop the app, enter ~C-g~ here and ~C-c C-c~ in ~*R*~

#+begin_src R

#+end_src

* TODO Break the app

1) After starting the app, open the R console: you can see that the
   server is listening.
2) Close the browser window that belongs to this process.
3) If you now try to stop the process in the Org-file with ~C-g~, the
   process will not abort: the server is still listening.
4) Change to the R console and shut it down there with ~C-c C-c~

* TODO Save the app and run it on the shell

1) Move the cursor to the hello world code block and enter ~C-c '~
2) In the new buffer, enter ~C-x h M-x write-region~ to write the code
   to a file ~hello.R~ (or copy the code to that file).
3) Return to the code block with ~C-c C-k~
4) Open a terminal (CMD line shell)
5) Navigate to the directory where ~hello.R~ resides
6) Run ~hello.R~ with the command ~Rscript hello.R~
7) Open the URL after ~Listening on~ in a browser
8) In the shell, stop the process with ~C-c C-c~

* TODO Run the app from an R script in Emacs

1) In Emacs, open ~hello.R~ using ~Dired~ (~C-x C-f~)
2) Run it straight from there with ~C-c C-c~
3) Close the process in the R console ~*R*~ with ~C-c C-c~

* TODO Create an input/output app

1) Load the Shiny package
2) Create the ~ui <- ~fluidPage(~textInput(), ~textOutput())~
3) ~textInput~ should accept your ~'name'~ and ask ~"Enter a name:"~
4) Format ~textOutput~ should return ~'hello'~
5) Create the ~server~ with ~input~ and ~output~ arguments
6) Inside the ~server~, assign ~renderText()~ to ~output$hello~
7) Inside ~renderText~, enter ~{paste()}~
8) Inside ~paste()~, enter ~"Hello,"~ and ~input$name~
9) Run the app with ~shinyApp~
10) To stop the app, enter ~C-g~ here and ~C-c C-c~ in ~*R*~

* TODO Build an app with a histogram

1) Set up the UI and the server
2) Inside ~fluidPage()~, create a ~mainPanel()~
3) Inside ~mainPanel()~, create a ~sliderInput()~ and ~plotOutput~
4) For ~sliderInput()~, define:
   - the ~input~ variable ~'binwidth'~
   - the text ~"Histogram binwidth"~
   - the parameters ~min=1, max=100, value=10~
5) Inside ~plotOutput~, define the ~output~ variable ~'nile'~
6) In the body of the ~server~ function, assign ~renderPlot({p})~ to
   ~output$nile~
7) As plot ~p~, use ~hist(Nile, breaks=input$binwidth)~
8) Customize the inside of ~hist()~ as you like
9) Call ~shinyApp~ for ~ui~ and ~server~ to open app in browser
10) Close process with ~C-g~ in the Org-file, and ~C-c C-c~ in ~*R*~

