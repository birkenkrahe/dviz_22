#+PROPERTY: header-args:R :export both :results output :session *R*
#+STARTUP: overview hideblocks indent inlineimages
#+AUTHOR:
Time-stamp: <>
* CUSTOMIZING A SCATTERPLOT

#+begin_src R
  par()$mfrow  
#+end_src

#+RESULTS:
: [1] 1 1

#+begin_src R :results graphics file :file cereal.png
  par(mfrow=c(1,1))
  library(MASS)
  x <- UScereal$sugars
  y <- UScereal$calories
  plot(x,y)  # same as plot(y ~ x)
#+end_src

#+RESULTS:
[[file:cereal.png]]
* ADDING AXIS LABELS

#+begin_src R :results graphics file :file axis.png
  plot(x,y, xlab="Grams of sugar per serving",
       ylab="Calories per serving", type="n")
#+end_src

#+RESULTS:
[[file:axis.png]]

Is ~points~ a generic function or not? If it is, then it has different
~methods~ for different data input
#+begin_src R
  methods(points) # yes! points IS a generic function
  methods(legend) # legends clearly is not a generic function
#+end_src

#+RESULTS:
: [1] points.default  points.formula* points.table*  
: see '?methods' for accessing help and source code
: no methods found

#+begin_src R
  index <- which(y>300)
  index
  y
  y[index]
  y[-index]
#+end_src

#+RESULTS:
#+begin_example
[1] 31 32
 [1] 212.12121 212.12121 100.00000 146.66667 110.00000 173.33333 134.32836
 [8] 134.32836 160.00000  88.00000 160.00000 220.00000 110.00000 110.00000
[15] 100.00000 110.00000 110.00000 220.00000 110.00000 133.33333 133.33333
[22] 110.00000 146.66667 125.00000 179.10448 179.10448 146.66667 113.63636
[29] 146.66667 113.63636 440.00000 363.63636 120.00000 146.66667  82.70677
[36] 186.66667  73.33333 149.25373 110.00000 238.80597 100.00000 179.10448
[43] 208.95522 260.00000 179.10448 100.00000  50.00000 200.00000 160.00000
[50] 200.00000 180.00000  97.34513 110.00000 134.32836 134.32836 146.66667
[57] 110.00000 110.00000 140.00000 100.00000 146.66667 110.00000 149.25373
[64] 100.00000 146.66667
[1] 440.0000 363.6364
 [1] 212.12121 212.12121 100.00000 146.66667 110.00000 173.33333 134.32836
 [8] 134.32836 160.00000  88.00000 160.00000 220.00000 110.00000 110.00000
[15] 100.00000 110.00000 110.00000 220.00000 110.00000 133.33333 133.33333
[22] 110.00000 146.66667 125.00000 179.10448 179.10448 146.66667 113.63636
[29] 146.66667 113.63636 120.00000 146.66667  82.70677 186.66667  73.33333
[36] 149.25373 110.00000 238.80597 100.00000 179.10448 208.95522 260.00000
[43] 179.10448 100.00000  50.00000 200.00000 160.00000 200.00000 180.00000
[50]  97.34513 110.00000 134.32836 134.32836 146.66667 110.00000 110.00000
[57] 140.00000 100.00000 146.66667 110.00000 149.25373 100.00000 146.66667
#+end_example

#+begin_src R
  foo <- c(200,300,400,500)
  findex <- which(foo > 300)
  findex

  foo[findex]
  foo[-findex]

  foo[foo>300]
#+end_src

#+RESULTS:
: [1] 3 4
: [1] 400 500
: [1] 200 300
: [1] 400 500

Plot with outliers highlighted:
#+begin_src R :results graphics file :file outliers.png
  plot(x,y, xlab="Grams of sugar per serving",
       ylab="Calories per serving", type="n")

  index <- which(y > 300)   # indices of the outliers
  points(x[-index], y[-index], pch=16) # all normal points
  points(x[index], y[index], pch=18, cex=2) # 2 outlying points
#+end_src

#+RESULTS:
[[file:outliers.png]]
* ADD REFERENCE LINES

#+begin_src R :results graphics file :file models.png
  ## basic plot
  plot(x,y, xlab="Grams of sugar per serving",
       ylab="Calories per serving", type="n")
  ## highlight outliers
  index <- which(y > 300)   # indices of the outliers
  points(x[-index], y[-index], pch=16) # all normal points
  points(x[index], y[index], pch=18, cex=2) # 2 outlying points

  ## trends lines
  olsModel <- lm(y ~ x) # linear regression model 1
  abline(olsModel, lty=3)
  library(robustbase)
  robustModel <- lmrob(y ~ x)
  abline(robustModel, lty=2, lwd=2)
#+end_src

#+RESULTS:
[[file:models.png]]

#+begin_src R
  methods(abline)
  olsModel
  robustModel
#+end_src

#+RESULTS:
#+begin_example
no methods found

Call:
lm(formula = y ~ x)

Coefficients:
(Intercept)            x  
     96.164        5.298

Call:
lmrob(formula = y ~ x)
 \--
method = "MM"
Coefficients:
(Intercept)            x  
     93.581        4.701
#+end_example

* CUSTOMIZATION WITH VECTORS

#+begin_src R :results graphics file :file pch.png
  plot(
    x = whiteside$Temp,
    y = whiteside$Gas,
    pch = c(6,16)[whiteside$Insul],
    col = c("red","blue")[whiteside$Insul],
    cex = c(1,2)[whiteside$Insul])
#+end_src

#+RESULTS:
[[file:pch.png]]

#+begin_src R
  c(6,16)[whiteside$Insul]
  whiteside$Insul
#+end_src

#+RESULTS:
#+begin_example
 [1]  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6
[26]  6 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16
[51] 16 16 16 16 16 16
 [1] Before Before Before Before Before Before Before Before Before Before
[11] Before Before Before Before Before Before Before Before Before Before
[21] Before Before Before Before Before Before After  After  After  After 
[31] After  After  After  After  After  After  After  After  After  After 
[41] After  After  After  After  After  After  After  After  After  After 
[51] After  After  After  After  After  After 
Levels: Before After
#+end_example
* ADDING TEXT TO A PLOT

** The ~paste~ function

#+begin_src R
  v <- paste(1, "one")
  v
  class(v)
#+end_src

#+RESULTS:
: [1] "1 one"
: [1] "character"

#+begin_src R
  result <- 100
  paste("This is the result: ", result)
#+end_src

#+RESULTS:
: [1] "This is the result:  100"

** Index of a name vector

#+begin_src R
  par()$lty  # list $ list element

#+end_src

#+RESULTS:
: [1] "solid"

#+begin_src R
  str(UScereal)
  rownames(UScereal)
#+end_src

#+RESULTS:
#+begin_example
'data.frame':	65 obs. of  11 variables:
 $ mfr      : Factor w/ 6 levels "G","K","N","P",..: 3 2 2 1 2 1 6 4 5 1 ...
 $ calories : num  212 212 100 147 110 ...
 $ protein  : num  12.12 12.12 8 2.67 2 ...
 $ fat      : num  3.03 3.03 0 2.67 0 ...
 $ sodium   : num  394 788 280 240 125 ...
 $ fibre    : num  30.3 27.3 28 2 1 ...
 $ carbo    : num  15.2 21.2 16 14 11 ...
 $ sugars   : num  18.2 15.2 0 13.3 14 ...
 $ shelf    : int  3 3 3 1 2 3 1 3 2 1 ...
 $ potassium: num  848.5 969.7 660 93.3 30 ...
 $ vitamins : Factor w/ 3 levels "100%","enriched",..: 2 2 2 2 2 2 2 2 2 2 ...
 [1] "100% Bran"                            
 [2] "All-Bran"                             
 [3] "All-Bran with Extra Fiber"            
 [4] "Apple Cinnamon Cheerios"              
 [5] "Apple Jacks"                          
 [6] "Basic 4"                              
 [7] "Bran Chex"                            
 [8] "Bran Flakes"                          
 [9] "Cap'n'Crunch"                         
[10] "Cheerios"                             
[11] "Cinnamon Toast Crunch"                
[12] "Clusters"                             
[13] "Cocoa Puffs"                          
[14] "Corn Chex"                            
[15] "Corn Flakes"                          
[16] "Corn Pops"                            
[17] "Count Chocula"                        
[18] "Cracklin' Oat Bran"                   
[19] "Crispix"                              
[20] "Crispy Wheat & Raisins"               
[21] "Double Chex"                          
[22] "Froot Loops"                          
[23] "Frosted Flakes"                       
[24] "Frosted Mini-Wheats"                  
[25] "Fruit & Fibre: Dates Walnuts and Oats"
[26] "Fruitful Bran"                        
[27] "Fruity Pebbles"                       
[28] "Golden Crisp"                         
[29] "Golden Grahams"                       
[30] "Grape Nuts Flakes"                    
[31] "Grape-Nuts"                           
[32] "Great Grains Pecan"                   
[33] "Honey Graham Ohs"                     
[34] "Honey Nut Cheerios"                   
[35] "Honey-comb"                           
[36] "Just Right Fruit & Nut"               
[37] "Kix"                                  
[38] "Life"                                 
[39] "Lucky Charms"                         
[40] "Mueslix Crispy Blend"                 
[41] "Multi-Grain Cheerios"                 
[42] "Nut&Honey Crunch"                     
[43] "Nutri-Grain Almond-Raisin"            
[44] "Oatmeal Raisin Crisp"                 
[45] "Post Nat. Raisin Bran"                
[46] "Product 19"                           
[47] "Puffed Rice"                          
[48] "Quaker Oat Squares"                   
[49] "Raisin Bran"                          
[50] "Raisin Nut Bran"                      
[51] "Raisin Squares"                       
[52] "Rice Chex"                            
[53] "Rice Krispies"                        
[54] "Shredded Wheat 'n'Bran"               
[55] "Shredded Wheat spoon size"            
[56] "Smacks"                               
[57] "Special K"                            
[58] "Total Corn Flakes"                    
[59] "Total Raisin Bran"                    
[60] "Total Whole Grain"                    
[61] "Triples"                              
[62] "Trix"                                 
[63] "Wheat Chex"                           
[64] "Wheaties"                             
[65] "Wheaties Honey Gold"
#+end_example

#+begin_src R
  index  #  values with calories > 300
  UScereal$calories[index] # values > 300
  rownames(UScereal)[index] # cereal names
#+end_src

#+RESULTS:
: [1] 31 32
: [1] 440.0000 363.6364
: [1] "Grape-Nuts"         "Great Grains Pecan"

** Create the text plot

#+begin_src R :results graphics file :file text.png
  ## basic plot
  plot(x,y, xlab="Grams of sugar per serving",
       ylab="Calories per serving", type="n")

  ## highlight outliers
  index <- which(y > 300)   # indices of the outliers
  points(x[-index], y[-index], pch=16) # all normal points
  points(x[index], y[index], pch=18, cex=2) # 2 outlying points

  ## trends lines
  olsModel <- lm(y ~ x) # linear regression model 1
  abline(olsModel, lty=3)
  library(robustbase)
  robustModel <- lmrob(y ~ x)
  abline(robustModel, lty=2, lwd=2)

  pointlabels <- paste(rownames(UScereal)[index])
  text(
    x =11,
    y=y[index],
    labels= pointlabels)
  #+end_src

  #+RESULTS:
  [[file:text.png]]
